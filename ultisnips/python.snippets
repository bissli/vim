# -----------------------------------------------------------
# => Helpers
# -----------------------------------------------------------
global !p

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'

def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES

endglobal

# -----------------------------------------------------------
# => Misc
# -----------------------------------------------------------

# Lambda
snippet ld "lambda x: f(x)" i
lambda ${1:x}: ${0:action}
endsnippet

snippet lde "lambda x: x.foo == bar" i
lambda ${1:x}: $1.${2:var} ${3:==} ${0:comparsion}
endsnippet

snippet ldf "v = lambda x: f(x)" i
${1:var} = lambda ${2:vars}: ${0:action}
endsnippet

# debug
snippet tryp "Try / Except-PDB" b
try:
  ${1:${VISUAL:pass}}
except Exception as exc:
  __import__('pprint').pprint(__import__('traceback').format_exc())
  __import__('pdb').set_trace()
  raise
$0
endsnippet

# jupyter / slime
snippet lbr "slime/jupyter cell" i
# %%
${0}
endsnippet

# Write to file
snippet we "Write collection to Excel" i
import os; ${1:pos}.write_excel(os.path.join(os.path.expanduser('~'), '${2:Downloads}', '${3:$1}.xlsx'));$0
endsnippet

snippet wc "Write collection to CSV" i
import os; ${1:pos}.write_csv(os.path.join(os.path.expanduser('~'), '${2:Downloads}', '${3:$1}.csv'));$0
endsnippet

snippet wf "Write text to file" i
import os
with open(os.path.join(os.path.expanduser('~'), '${2:Downloads}', '${3:$1}.${4:txt}'), 'w+') as f:
	f.write(${1:thename})
$0
endsnippet

snippet ifmain "ifmain" b

if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
    main() \
endsnippet

snippet ifmain "ifmain-test" b

if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
    main() \
    if len(__import__(`!p snip.rv = get_quoting_style(snip)`sys`!p snip.rv = get_quoting_style(snip)`).argv) > 1 \
    else __import__(`!p snip.rv = get_quoting_style(snip)`doctest`!p snip.rv = get_quoting_style(snip)`).testmod(optionflags=4 | 8 | 32)
endsnippet

# "NORMALIZE_WHITESPACE | ELLIPSIS | IGNORE_EXCEPTION_DETAIL"
snippet iftest "default" b

if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
    __import__(`!p snip.rv = get_quoting_style(snip)`doctest`!p snip.rv = get_quoting_style(snip)`).testmod(optionflags=4 | 8 | 32)
endsnippet

snippet iftest "default-func" b

if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
    import doctest, sys  # noqa
    if len(sys.argv) < 2:
        doctest.testmod(optionflags=4 | 8 | 32)
    else:
        for f in sys.argv[1:]:
            doctest.run_docstring_examples(globals()[f], globals())
endsnippet

snippet iftest "logger-cmd" b

if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
    import libb, logging, doctest, sys  # noqa
    libb.configure_logging(`!p snip.rv = get_quoting_style(snip)`cmd`!p snip.rv = get_quoting_style(snip)`)
    logger = logging.getLogger(`!p snip.rv = get_quoting_style(snip)`cmd`!p snip.rv = get_quoting_style(snip)`)
    doctest.testmod(optionflags=4 | 8 | 32)
endsnippet

snippet iftest "pytest" b

if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
    __import__(`!p snip.rv = get_quoting_style(snip)`pytest`!p snip.rv = get_quoting_style(snip)`).main([__file__])
endsnippet

snippet scp "slime cell [python]" bw
# %%
${0}
endsnippet

snippet scr "slime cell [r]" bw
# %% language="R"
%%R
${0}
endsnippet
